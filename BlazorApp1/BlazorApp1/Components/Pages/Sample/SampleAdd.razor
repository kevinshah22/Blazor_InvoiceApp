@page "/sample/add"
@page "/sample/edit/{id:int}"
@using BlazorApp1.Client.Helpers
@using BlazorApp.ViewModel
@inject NavigationManager NavigationManager
@using System.Net.Http.Headers;

@inject HttpClient Http

<PageTitle>Categories</PageTitle>

<h1>@Title Categories</h1>

<EditForm Model="category" OnValidSubmit="SaveCategory" FormName="CategoryAdd">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText type="text" class="form-control" id="catname" @bind-Value="category.Name" />
        </div>
        <ValidationMessage For="@(() => category.Name)" />
    </div>
    <div class="mb-3">
        <label for="Description" class="form-label">Description</label>
        <div class="col-md-4">
            <InputText type="text" class="form-control" id="catdesc" @bind-Value="category.Description" />
        </div>
        <ValidationMessage For="@(() => category.Description)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    protected string Title = "Add";
    [SupplyParameterFromForm]
    protected CategoryModel category { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            Title = "Edit";
            APIResponse apiResponse = await Http.GetFromJsonAsync<APIResponse>($"https://localhost:7204/v1/Category/{id}");
            category = ResponseHelper.GetResponse<CategoryModel>(apiResponse);

            // var request = new HttpRequestMessage(HttpMethod.Get,
            //             $"https://localhost:7083/v1/Category/{id}");

            // var client = ClientFactory.CreateClient();
            // var response = await client.SendAsync(request);

            // if (response.IsSuccessStatusCode)
            // {
            //     string responseStream = await response.Content.ReadAsStringAsync();
            //     APIResponse apiResponse = JsonConvert.DeserializeObject<APIResponse>(responseStream);



            //     if (category == null)
            //     {
            //         getCategoryError = true;
            //     }
            // }
            // else
            // {
            //     getCategoryError = true;
            // }
        }
    }

    protected async Task SaveCategory()
    {
        var categorySerialized = System.Text.Json.JsonSerializer.Serialize(category);

        if (id > 0)
        {
            // var request = new HttpRequestMessage(HttpMethod.Put,
            //            $"https://localhost:7083/v1/Category");

            // request.Content = new StringContent(categorySerialized, Encoding.UTF8);
            // request.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            // //request.Properties.Add("category", category);

            // var client = ClientFactory.CreateClient();
            // var response = await client.SendAsync(request);
        }
        else
        {
            var result = await Http.PostAsJsonAsync("https://localhost:7204/v1/Category", category);

            // var request = new HttpRequestMessage(HttpMethod.Post,
            //            $"https://localhost:7083/v1/Category");

            // //request.Properties.Add("category", category);
            // request.Content = new StringContent(categorySerialized, Encoding.UTF8);
            // request.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            // var client = ClientFactory.CreateClient();
            // var response = await client.SendAsync(request);
        }
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/category");
    }
}
