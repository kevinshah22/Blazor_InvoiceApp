@page "/"
@using BlazorApp.Services
@using MudBlazor.Charts
@using BlazorApp.ViewModel
@inject IInvoiceService _invoiceService
@inject BlazorSpinner.SpinnerService _spinnerService

<PageTitle>Home</PageTitle>
<style>
    .mud-chart {
        background-color: #f8f9fa;
        border-radius: 10px;
    }
</style>
<h1>Dashboard</h1>


<div class="row">
    <div class="col-md-6">
        <h4>Monthly Invoices</h4>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@_series" class="mud-chart" @bind-SelectedIndex="_index" XAxisLabels="@_xAxisLabels.ToArray()" Width="auto" Height="@_height"
                  ChartOptions="options"></MudChart>
    </div>
    <div class="col-md-6">
        <h4>Store wise Monthly Invoices</h4>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@storeViseInvoice" @bind-SelectedIndex="_index" XAxisLabels="@_xAxisLabels.ToArray()" Width="auto" Height="@_height"
                  ChartOptions="options"></MudChart>
    </div>

    <div class="col-md-6">
        <h4>Category wise Monthly Invoices</h4>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@categoryWiseInvoice" @bind-SelectedIndex="_index" XAxisLabels="@_xAxisLabels.ToArray()" Width="auto" Height="@_height"
                  ChartOptions="options"></MudChart>
    </div>
</div>

@code {
    private int _index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private string _width = "650px";
    private string _height = "350px";

    private List<ChartSeries> _series { get; set; } = new();
    private List<ChartSeries> storeViseInvoice { get; set; } = new();
    private List<ChartSeries> categoryWiseInvoice { get; set; } = new();

    private List<string> _xAxisLabels { get; set; } = new();
    private IEnumerable<InvoiceChartModel>? invoices = [];
    private List<double[]> ChartData { get; set; } = new();
    private ChartOptions options { get; set; } = new();
    //private AxisChartOptions _axisChartOptions = new AxisChartOptions();


    protected override async Task OnInitializedAsync()
    {
        _spinnerService.Show();
        invoices = await _invoiceService.GetInvocieDataCurrentYear();
        List<InvoiceItemChartModel> invoiceItems = await _invoiceService.GetInvoiceItemsByYear();

        var allMonths = Enumerable.Range(1, 12);

        options = new ChartOptions
            {
                LineStrokeWidth = 10d,
                ShowLabels = true,
                ShowLegend = true,
                ShowToolTips = true,
                ShowLegendLabels = true,
            };


        var monthlyInvoice = invoices
            .GroupBy(t => t.InvoiceDate.Month)
            .Select(g => new { Month = g.Key, Total = Convert.ToDouble(g.Sum(t => t.Total)) })
            .ToList();


        var monthlyStoreWiseInvoice = invoices
        .GroupBy(t => new { t.InvoiceDate.Month, t.StoreId })
        .Select(g => new { Month = g.Key.Month, StoreId = g.Key.StoreId, Total = Convert.ToDouble(g.Sum(t => t.Total)) })
        .ToList();

        var monthlyCategoryWiseInvoices = invoiceItems
        .GroupBy(t => new { t.InvoiceDate.Month, t.CategoryId })
        .Select(g => new { Month = g.Key.Month, CategoryId = g.Key.CategoryId, Total = Convert.ToDouble(g.Sum(t => t.Total)) })
        .ToList();


        // Ensure all months exist (fill missing months with 0)
        _xAxisLabels = Enumerable.Range(1, 12).Select(m => new DateTime(1, m, 1).ToString("MMM")).ToList();
        var stores = invoices.Select(x => new { StoreId = x.StoreId, StoreName = x.StoreName }).Distinct().ToList();

        var categories = invoiceItems.Select(x => new { CategoryId = x.CategoryId, CategoryName = x.CategoryName }).Distinct().ToList();

        foreach (var store in stores)
        {
            storeViseInvoice.Add((new ChartSeries { Name = store.StoreName, Data = _xAxisLabels.Select(m => monthlyStoreWiseInvoice.FirstOrDefault(g => g.Month == DateTime.ParseExact(m, "MMM", null).Month && g.StoreId == store.StoreId)?.Total ?? 0).ToArray() }));
        }

        foreach (var category in categories)
        {
            categoryWiseInvoice.Add((new ChartSeries { Name = category.CategoryName, Data = _xAxisLabels.Select(m => monthlyCategoryWiseInvoices.FirstOrDefault(g => g.Month == DateTime.ParseExact(m, "MMM", null).Month && g.CategoryId == category.CategoryId)?.Total ?? 0).ToArray() }));
        }

        _series.Add(new ChartSeries { Name = "Invoice", Data = _xAxisLabels.Select(m => monthlyInvoice.FirstOrDefault(g => g.Month == DateTime.ParseExact(m, "MMM", null).Month)?.Total ?? 0).ToArray() });


        _spinnerService.Hide();

    }
}