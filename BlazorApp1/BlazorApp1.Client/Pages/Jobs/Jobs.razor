@page "/job"

@using BlazorApp1.Client.Helpers
@using BlazorApp.ViewModel
@inject BlazorSpinner.SpinnerService _spinnerService
@inject IJobApplicationService _jobApplicationService
@using MudBlazor

<PageTitle>Items</PageTitle>


<div class="row">
    <div class="col-md-9"><h1>Items</h1></div>
    <div class="col-md-3 text-end">
        <a href='/item/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Item
        </a>
    </div>
    @*  <div class="input-group col">
    <input type="text" class="form-control" placeholder="Search user by name"
    @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
    @if (SearchString.Length > 0)
    {
    <div class="input-group-append">
    <button class="btn btn-danger" @onclick="ResetSearch">
    <i class="fas fa-times"></i>
    </button>
    </div>
    }
    </div> *@
</div>
<br />

<div class="row mt-3">
    <MudDropContainer T="JobApplicationModel" Items="jobs" ItemsSelector="@((job,dropzone) => job.JobStatus == byte.Parse(dropzone))" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudDropZone T="JobApplicationModel" Identifier="@Convert.ToByte(JobStatus.Applied).ToString()" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">Applied</MudText>
            </MudDropZone>
            <MudDropZone T="JobApplicationModel" Identifier="@Convert.ToByte(JobStatus.Rejected).ToString()" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">Rejected</MudText>
            </MudDropZone>
            <MudDropZone T="JobApplicationModel" Identifier="@Convert.ToByte(JobStatus.InterviewScheduled).ToString()" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">Interview Scheduled</MudText>
            </MudDropZone>
            <MudDropZone T="JobApplicationModel" Identifier="@Convert.ToByte(JobStatus.Offer).ToString()" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">Offer</MudText>
            </MudDropZone>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25" Class="pa-4 my-4">
                <div class="card-body">
                    <h6 class="card-title">@context.JobTitle</h6>
                    <h6 class="card-subtitle mb-2 text-muted">@context.CompanyName</h6>
                    <p class="card-text">@context.AppliedDate.ToString("dd/MMM/yyyy")</p>
                    <a href="#">View detail</a>
                </div>
            </MudPaper>
            @*  *@
        </ItemRenderer>
    </MudDropContainer>
</div>

@code {
    private IEnumerable<JobApplicationModel>? jobs = [];


    protected override async Task OnInitializedAsync()
    {
        _spinnerService.Show();
        jobs = await _jobApplicationService.GetJobs();
        _spinnerService.Hide();
    }

    private void ItemUpdated(MudItemDropInfo<JobApplicationModel> dropItem)
    {

        dropItem.Item.JobStatus = Convert.ToByte(dropItem.DropzoneIdentifier);
        _jobApplicationService.Update(dropItem.Item);
    }

    private string EditItem(ItemModel item)
    {
        return $"item/edit/{item.Id}";
    }

    private async Task DeleteItem(ItemModel item)
    {
        // bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure to Delete the Item : {item.Name}?"); // Confirm

        // if (confirmed)
        // {
        //     // var result = await Http.DeleteAsync($"/api/employee/deleteemployee/{employee.Id}");
        //     // if (result != null && result.StatusCode == System.Net.HttpStatusCode.OK)
        //     // {
        //     //     await this.FetEmployees();
        //     // }
        // }


    }

}
