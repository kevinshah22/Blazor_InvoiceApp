@page "/category/add"
@page "/category/edit/{id:int}"

@using BlazorApp1.Client.Helpers
@using BlazorApp.ViewModel
@inject NavigationManager NavigationManager
@inject ICategoryService _categoryService
@inject BlazorSpinner.SpinnerService _spinnerService

<h3>@HeaderText</h3>
<hr />

<div style="width:60%;">
    <EditForm Model="category" OnValidSubmit="CreateCategory" FormName="categoryadd">
        <DataAnnotationsValidator />
        <div class="row mb-3">
            <label for="inputCode" class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <InputText class="form-control" id="empcode" @bind-Value="@category.Name" />
                <ValidationMessage For="@(() => category.Name)" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputName" class="col-sm-2 col-form-label">Description</label>
            <div class="col-sm-10">
                <InputText class="form-control" id="empname" @bind-Value="@category.Description" />
            </div>
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Save</button>
            <a class="btn btn-danger" tabindex="-1" role="button" aria-disabled="true" href="category">Back To Category List</a>
        </div>
    </EditForm>
</div>

@* @if (Id > 0)
{
    <CategoryInfo Id="Id" HeaderText="Update Category" Category="category" OnValidSubmit="UpdateEmployee"></CategoryInfo>
}
else
{
    <CategoryInfo Id="0" HeaderText="Add Category" Category="category" OnValidSubmit="CreateEmployee"></CategoryInfo>
} *@


@code {
    [Parameter]
    public int id { get; set; }
    [SupplyParameterFromForm]
    protected CategoryModel category { get; set; }

    protected string HeaderText = "Create Category";

    protected override async Task OnInitializedAsync()
    {
        _spinnerService.Show();
        category ??= new();

        if (id != 0)
        {
            HeaderText = "Edit Category";
            category = await _categoryService.GetCategory(id);
        }

        _spinnerService.Hide();
    }



    private async Task CreateCategory()
    {
        _spinnerService.Show();
        int returnId = 0;
        if (id > 0)
        {
            returnId = await _categoryService.Create(category);
        }
        else
        {
            returnId = await _categoryService.Update(category);
        }

        if (returnId > 0)
        {
            NavigationManager.NavigateTo("category");
        }
    }
}
