@page "/invoice/add"
@page "/invoice/edit/{id:int}"

@using BlazorApp.Core
@using BlazorApp.ViewModel
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IStoreService _storeService
@inject IInvoiceService _invoiceService
@inject IItemService _itemService
@inject ApplicationSettings applicationSetting
@inject IDialogService DialogService
@using Helpers


<PageTitle>Invoice</PageTitle>

<h1>@(IsEditMode ? "Edit Invoice" : "Add Invoice")</h1>

<EditForm Model="invoice" FormName="createInvoice">
    <div class="mb-3">
        <label class="form-label">Store</label>
        <InputSelect @bind-Value="invoice.StoreId" class="form-select">
            <option value="">Select Store</option>
            @foreach (var store in stores)
            {
                <option value="@store.Id">@store.Name</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Invoice Date</label>
        @* <MudDatePicker @bind-Date="invoice.InvoiceDate"></MudDatePicker> *@
        @* <MudDatePicker Label="Basic example" @bind-Date="invoiceDate"></MudDatePicker> *@

        <InputDate class="form-control" @bind-Value="invoice.InvoiceDate" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value="invoice.Description" />
    </div>
</EditForm>


<div class="row">
    <div class="col-md-9"><h3>Invoice Items</h3></div>
    <div class="col-md-3 text-end"><button type="button" class="btn btn-success" @onclick="AddNewItem">+ Add Item</button></div>
</div>


<table class="table">
    <thead>
        <tr>
            <th>Item</th>
            <th>Unit Price</th>
            <th>Quantity</th>
            <th>Total</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in invoiceItems)
        {
            <tr>
                <td class="col-3">
                    <InputSelect @bind-Value="item.ItemId" class="form-select">
                        <option value="">Select Item</option>
                        @foreach (var s in availableItems)
                        {
                            <option value="@s.Id">@s.Name</option>
                        }
                    </InputSelect>
                </td>
                <td class="col-3">
                    <div class="input-group mb-3">
                        <span class="input-group-text">@applicationSetting.CurrencySymbol</span>
                        <InputNumber class="form-control" @bind-Value="item.Price" @oninput="e => UpdatePrice(item, e.Value)" />
                    </div>
                </td>
                <td class="col-3">
                    <InputNumber class="form-control" @bind-Value="item.Quantity" @oninput="e => UpdateQuantity(item, e.Value)" />
                </td>
                <td class="col-2">@applicationSetting.CurrencySymbol @item.Total</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => RemoveItem(item)">X</button>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td></td>
            <td></td>
            <td>Grand Total</td>
            <td>@applicationSetting.CurrencySymbol @grandTotal</td>
            <td></td>
        </tr>
    </tfoot>
</table>


@* <input type="button" @onclick="AddNewItem" value="Add Item" /> *@

<div class="mt-3">
    <button type="submit" class="btn btn-primary" @onclick="SaveInvoice">Save</button>
    <a class="btn btn-danger" href="store">Back To Store List</a>
</div>


@code {
    [Parameter] public int id { get; set; }
    private decimal grandTotal = 0;
    private bool IsEditMode => id > 0;
    private InvoiceModel invoice = new();
    private List<InvoiceItemModel> invoiceItems = new();
    private List<StoreModel> stores = new();
    private List<ItemModel> availableItems = new();
    private DateTime? invoiceDate = DateTime.Now;

    //[Inject] IJSRuntime JS { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            stores = await _storeService.GetStores();
            availableItems = await _itemService.GetItems();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");

        }


        // if (IsEditMode)
        // {
        //     invoice = await _invoiceService.GetInvoiceById(id) ?? new();
        //     invoiceItems = invoice.Items?.ToList() ?? new();
        // }
        // else
        // {
        invoice = new();
        invoiceItems = new List<InvoiceItemModel> { new(), new() }; // Default with 2 items
                                                                    //}
    }

    private async Task SaveInvoice()
    {
        InvoiceCreateModel invoiceCreate = new() { Invoice = invoice, InvoiceItems = invoiceItems };
        invoiceCreate.Invoice.BillAmount = grandTotal;
        await _invoiceService.Create(invoiceCreate);
        // invoice.Items = invoiceItems;

        // if (IsEditMode)
        //     await _invoiceService.UpdateInvoice(invoice);
        // else
        //     await _invoiceService.CreateInvoice(invoice);

        NavigationManager.NavigateTo("/invoice");
    }

    private void AddNewItem()
    {
        Console.WriteLine("AddNewItem Clicked!"); // Debugging

        invoiceItems = new List<InvoiceItemModel>(invoiceItems) { new() };
        StateHasChanged();
    }

    private async Task RemoveItem(InvoiceItemModel item)
    {
        var parameters = new DialogParameters<Dialog>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;



        // var parameters = new DialogParameters { ["ContentText"] = "Are you sure you want to delete this?" };
        // var options = new DialogOptions { CloseOnEscapeKey = true };

        // var dialog = await DialogService.ShowAsync<MudDialog>("Confirm Delete", parameters, options);
        // var result = await dialog.Result;

        if (!result.Canceled)
        {
            invoiceItems.Remove(item);
            StateHasChanged();
        }

        // bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete?");
        // if (isConfirmed)
        // {
           
        // }        
    }

    private void UpdatePrice(InvoiceItemModel item, object value)
    {
        if (value != null && !string.IsNullOrWhiteSpace(value.ToString()))
        {
            item.Price = Convert.ToDecimal(value);
            item.Total = item.Price * item.Quantity;
            CalculateGrandTotal();
            StateHasChanged();
        }
    }

    private void UpdateQuantity(InvoiceItemModel item, object value)
    {
        if (value != null && !string.IsNullOrWhiteSpace(value.ToString()))
        {
            item.Quantity = Convert.ToInt32(value);
            item.Total = item.Price * item.Quantity;
            CalculateGrandTotal();
            StateHasChanged();
        }
    }

    private void CalculateGrandTotal()
    {
        grandTotal = invoiceItems.Select(x => x.Total).Sum();
    }
}
