@page "/invoice/add"
@page "/invoice/edit/{id:int}"

@using BlazorApp.Core
@using BlazorApp.ViewModel
@using MudBlazor
@using Helpers
@using MudBlazor.Components
@using Item
@inject NavigationManager NavigationManager
@inject IStoreService _storeService
@inject IInvoiceService _invoiceService
@inject IItemService _itemService
@inject ApplicationSettings applicationSetting
@inject IDialogService DialogService
@inject BlazorSpinner.SpinnerService _spinnerService


<PageTitle>Invoice</PageTitle>

<h1>@(IsEditMode ? "Edit Invoice" : "Add Invoice")</h1>

<EditForm Model="invoice" FormName="createInvoice" class="mb-4">
    <div class="form-group row">
        <div class="col-md-6">
            <label for="staticEmail" class="col-auto col-form-label">Store</label>
            <div class="col-sm-10 text-left">
                <MudSelect @bind-Value="invoice.StoreId" Variant="Variant.Outlined">
                    <MudSelectItem value="0">Select Store</MudSelectItem>
                    @foreach (var store in stores)
                    {
                        <MudSelectItem Value="store.Id">@store.Name</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
        <div class="col-md-6">
            <label for="staticEmail" class="col-auto col-form-label ml-2">Invoice Date</label>
            <div class="col-sm-10">
                <MudDatePicker @bind-Date="invoiceDate" Variant="Variant.Outlined"></MudDatePicker>
            </div>
        </div>
    </div>


    <div class="mb-3 mt-3">
        <label class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value="invoice.Description" />
    </div>
</EditForm>
<br />
<br />

<div class="row mb-4">
    <div class="col-md-9"><h3>Invoice Items</h3></div>
    <div class="col-md-3 text-end">
        <MudTooltip Text="Add Invoice Item">
            <button type="button" class="btn btn-success" @onclick="AddNewItem">+ Add Invoice Item</button>
        </MudTooltip>
    </div>
</div>


<table class="table mt-4">
    <thead>
        <tr>
            <th>Item</th>
            <th>Unit Price</th>
            <th>Quantity</th>
            <th>Total</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in invoiceItems)
        {
            <tr>
                <td class="col-3">
                    <div class="row">
                        <div class="col-md-9">
                            <InputSelect @bind-Value="item.ItemId" class="form-select">
                                <option value="">Select Item</option>
                                @foreach (var s in availableItems)
                                {
                                    <option value="@s.Id">@s.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-danger" @onclick="() => OpenModal()">+</button>
                        </div>
                    </div>
                </td>
                <td class="col-3">
                    <div class="input-group mb-3">
                        <span class="input-group-text">@applicationSetting.CurrencySymbol</span>
                        <InputNumber class="form-control" @bind-Value="item.Price" @oninput="e => UpdatePrice(item, e.Value)" />
                    </div>
                </td>
                <td class="col-3">
                    <InputNumber class="form-control" @bind-Value="item.Quantity" @oninput="e => UpdateQuantity(item, e.Value)" />
                </td>
                <td class="col-2">@applicationSetting.CurrencySymbol @item.Total</td>
                <td>
                    <MudTooltip Text="Delete">
                        <button class="btn btn-danger" @onclick="() => RemoveItem(item)">X</button>
                    </MudTooltip>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td></td>
            <td></td>
            <td class="text-end"><h5>Grand Total</h5></td>
            <td><h5>@applicationSetting.CurrencySymbol @grandTotal</h5></td>
            <td></td>
        </tr>
    </tfoot>
</table>


@* <input type="button" @onclick="AddNewItem" value="Add Item" /> *@

<div class="mt-3">
    <button type="submit" class="btn btn-primary" @onclick="SaveInvoice">Save</button>
    <a class="btn btn-danger" href="invoice">Back To Store List</a>
</div>


<div class="modal @(showModal ? "fadfeInAnimation" : "")" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true" style="display:@(showModal ? " block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Item</h5>
            </div>
            <div class="modal-body">
                <CascadingValue Value="EventCallback.Factory.Create<bool>(this, CloseModal)">

                    <BlazorApp1.Client.Pages.Item.Item IsDialog="true" OnValueChanged="GetNewItem"></BlazorApp1.Client.Pages.Item.Item>
                </CascadingValue>
                @* <BlazorApp1.Client.Pages.Item.Item IsDialog="true" @bind-OnClose="CloseModal" ></BlazorApp1.Client.Pages.Item.Item> *@
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int id { get; set; }
    private decimal grandTotal = 0;
    private bool IsEditMode => id > 0;
    private InvoiceModel invoice = new();
    private List<InvoiceItemModel> invoiceItems = new();
    private List<StoreModel> stores = new();
    private List<ItemModel> availableItems = new();
    private DateTime? invoiceDate = DateTime.Now;

    private bool showModal = false;

    private void OpenModal()
    {
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _spinnerService.Show();
        try
        {
            stores = await _storeService.GetStores();
            availableItems = await _itemService.GetItems();

            if (id > 0)
            {
                invoice = await _invoiceService.GetInvoice(id);
                invoiceItems = await _invoiceService.GetInvoiceItems(id);
                invoiceDate = invoice.InvoiceDate;
                grandTotal = invoice.BillAmount;
            }
            else
            {
                invoice = new();
                invoiceItems = new List<InvoiceItemModel> { new(), new() }; // Default with 2 items
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }

        _spinnerService.Hide();
    }

    private async Task GetNewItem(int id)
    {
        Console.WriteLine(id);
        availableItems = await _itemService.GetItems();

        StateHasChanged();
    }

    private async Task SaveInvoice()
    {
        _spinnerService.Show();
        InvoiceCreateModel invoiceCreate = new() { Invoice = invoice, InvoiceItems = invoiceItems };
        invoiceCreate.Invoice.InvoiceDate = invoiceDate.Value;
        invoiceCreate.Invoice.BillAmount = grandTotal;

        if (id > 0)
        {
            await _invoiceService.Update(invoiceCreate);
        }
        else
        {
            await _invoiceService.Create(invoiceCreate);
        }

        NavigationManager.NavigateTo("/invoice");
    }

    private void AddNewItem()
    {
        _spinnerService.Show();

        invoiceItems = new List<InvoiceItemModel>(invoiceItems) { new() };
        StateHasChanged();
        _spinnerService.Hide();
    }

    private async Task RemoveItem(InvoiceItemModel item)
    {
        var parameters = new DialogParameters<Dialog>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _spinnerService.Show();
            invoiceItems.Remove(item);
            CalculateGrandTotal();
            StateHasChanged();

            _spinnerService.Hide();
        }
    }

    private void UpdatePrice(InvoiceItemModel item, object value)
    {
        if (value != null && !string.IsNullOrWhiteSpace(value.ToString()))
        {
            item.Price = Convert.ToDecimal(value);
            item.Total = item.Price * item.Quantity;
            CalculateGrandTotal();
            StateHasChanged();
        }
    }

    private void UpdateQuantity(InvoiceItemModel item, object value)
    {
        if (value != null && !string.IsNullOrWhiteSpace(value.ToString()))
        {
            item.Quantity = Convert.ToInt32(value);
            item.Total = item.Price * item.Quantity;
            CalculateGrandTotal();
            StateHasChanged();
        }
    }

    private void CalculateGrandTotal()
    {
        grandTotal = invoiceItems.Select(x => x.Total).Sum();
    }
}
